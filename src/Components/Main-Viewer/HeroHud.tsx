
import React, { useState, useEffect, FunctionComponent, useRef, useSyncExternalStore } from 'react';
import styles from './HeroHud.module.css';
import { HostBankModel } from '../BankModels/HostBankModel';
import { DataManager } from '../EnergyModel/ContractBuilder/DataLayerTypes';
import { ContractBuilder } from "../EnergyModel/ContractBuilder/ContractBuilder";
import { BuilderStateVariables } from "../EnergyModel/ContractBuilder/BuilderStateVariables";
import { EnergyModel } from '../EnergyModel/EnergyModel';

import { useMoralis, useNFTBalances } from "react-moralis";
import Moralis from 'moralis-v1/types';

// Hero Hud Component
// This component is the HUD that is the first of the three main components
// This component is going to be generated by the AI Assistant.
// It will dream up a HUD that will be used to interact with the user and connect their profile to the blockchain
// before it's drempt up, it will be used to connect the machine to the blockchain and the user to the machine
// first the bank model will be generated
// after the user connects to a local machine, the bank model will expand to include the server's profile
// the bank model will then call the Energy Model which will be generated using the local machine's profile
// the user has the ability to edit the profile and must confirm the changes before they are saved to the blockchain
// after the use confirms the changes, the Energy model will minimize into a search bar and another bank model will be generated
// the 2nd bank model will be locked using the wallet model and the user will have to unlock it using their wallet
// after the user unlocks the 2nd bank model, a trade model will be generated, which will be used to trade the user's energy
// after the trade is complete, the user will be able to see the results of the trade in both bank models and the energy model
// after a while, another trade will come in from the blockchain the user is connected to and a new trade model will be generated
// confirming this trade will turn the user's profile into a nWonderland profile and the user will be able to see the results of 
// the security analysis in the bank models and the energy model.
// after the user confirms the trade: 
// 1. the AI tools layer will be generated and all of the user's data will be stored in the local server's profile
// 2. the Digital Twin layer will be generated and the user will be able to connect other devices to the server
// 3. the Open World layer will be generated and the user will be able to connect to other contracts and servers

interface DataLayer {
    dataLayer: typeof DataManager | undefined;
    data: any;
}
// TODO: fix the rendering of the five components

// we need to pass the information from the contract builder to the bank

// how de we keep set mission status from being called multiple times?
// we need to create a function that closes the contract builder when setMissionStatus is called
// but then host bank model will be called again and

export const HeroHud: FunctionComponent<DataLayer> = (data) => {
    const [attributes, setAttributes] = useState(BuilderStateVariables.attributes);
    const [functions, setFunctions] = useState(BuilderStateVariables.functions);
    const [hostBankModelChildren, setHostBankModelChildren] = useState([] as any);
    const [pause, setPause] = useState(false);
    console.log("hostbankmodellength:", hostBankModelChildren.length);
    

    const suspendEnergyTransactions = () => {
        setPause(!pause);
        console.log("Energy Transactions Suspended");
    }

    const pauseButtonText = pause ? "Resume Energy Transactions" : "Suspend Energy Transactions";
    const pauseButtonColor = pause ? "red" : "green";
    const pauseButton = (
        <button className={styles.heroButton} onClick={suspendEnergyTransactions} style={{ backgroundColor: pauseButtonColor }}>{pauseButtonText}</button>
    )
    // why is the energy model not centered?
    // why is the energy model not centered?
    return (
        <div className={styles.mainDiv}>
            {pauseButton} 
                    {pause ? null: (
                    <div className={(hostBankModelChildren.length>1)?(styles.blank):(styles.cards)}>
                        <HostBankModel onPause={pause} addModel={setHostBankModelChildren} attributes={attributes} functions={functions} />
                        {hostBankModelChildren}
                    </div>
                    )
                    }
            </div>

    )
}
function subscribe(onStoreChange: () => void): () => void {
    throw new Error('Function not implemented.');
}

function getSnapshot(): unknown {
    throw new Error('Function not implemented.');
}

