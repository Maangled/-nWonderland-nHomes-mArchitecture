import { IndexDatatype } from "cesium";


// The data layer is the foundation of the nWonderland network
// the data layer is the data structure that is used to generate the Digital Twin layer, the Open World layer, and the AI Tools layer
// the data layer is a set of smart contracts that are connected to each other through the nWonderland network


// datatypes represent the data structure of the data layer to be generated by the AI Assistant through smart contracts
export interface DataType {
    profile: ProfileType;
    nHome: nHomeType;
    nWonderland: nWonderlandType;
    nBrain: nBrainType;
    nFamiliar: nFamiliarType;
    nMatter: nMatterType;
    nEnergy: nEnergyType;
    nData: nDataType;
    MEDcard: MatterEnergyDataCardType;
    SatoriCard: SatoriCardType;
    HeroCard: HeroCardType;
    }

    // nHome represents an IoT device that is connected to the user's profile
    // the nHome replicates the user's home and is used to generate the Digital Twin layer
    export interface nHomeType {
        profile: ProfileType;
        }
    
    // nWonderland represents a server that is connected to the user's profile and is used to generate the Open World layer
    // this is where users can connect to other servers and contracts, it is the basis of the Open World layer
    export interface nWonderlandType {
        profile: ProfileType;
        }
    
    // nBrain represents the AI Assistant that is connected to the user's profile
    // the nBrain is used to generate the AI Tools layer
    export interface nBrainType {
        profile: ProfileType;
        }
    
    // nFamiliar represents a familiar that is connected to the user's profile, used for security
    // the nFamiliar can exist in the Digital Twin layer and the Open World layer
    // the nFamiliar is used to generate the Hero HUD layer
    export interface nFamiliarType {
        profile: ProfileType;
        }

    // nMatter represents a resource that is connected to an IoT device
    // and contains the information of the IoT device's resources
    export interface nMatterType {
        profile: ProfileType;
        }

    // nEnergy represents an the security of an IoT device
    // the nEnergy is a copy of the nMatter without the raw data and contains a security report
    export interface nEnergyType {
        profile: ProfileType;
        }
    
    // nData represents specific data that is stored in the user's profile
    // nData represents data that is being transferred between the user's profile and the nWonderland network
    export interface nDataType {
        profile: ProfileType;
        }

    // MEDcard represents a card that represents a data layer. It ensures that there are no data leaks.
    // MEDcards are a series of contracts that train the AI Assistant to generate and augment data layers
    // MEDcards contain a profile, a nHome, a nWonderland, a nBrain, a nFamiliar, a nMatter, a nEnergy, and a nData
    export interface MatterEnergyDataCardType {
        profile: ProfileType;
        }

    // SatoriCard represents a card that a sorted value of data. It is generated by the moralis.io/nWonderland network and can
    // be anonymously claimed using MEDcards
    export interface SatoriCardType {
        profile: ProfileType;
        }

    // HeroCard represents a factual value of data. It is generated by the moralis.io/nWonderland network and can be run in the 
    // AI Assistant to Augment the responses of the AI Assistant beyond the user's profile
    export interface HeroCardType {
        profile: ProfileType;
        }

// Every iota of data in the data layer will first be created as a profile
// a series of 4 contracts will be run on the profile to generate the data layer by deliniating the data into it's component ideas
// each of the 4 layers will be a profile that will be used to generate the next layer
export interface ProfileType {
    encryptionTools: EncryptionToolsType;
    itemTracker: ItemTrackerType;
    itemDisplacer: ItemDisplacerType;
    itemVault: ItemVaultType;
    }

// The item vault will describe the item with a detailed description
export interface ItemVaultType {
    description: string[];
}

// The item displacer will devide the item into it's component ideas
export interface ItemDisplacerType {
    tags: string[];
}

// The item tracker will 
export interface ItemTrackerType {
    name: string[];
}

// The encryption tools will contain the item's id and the item's encryption key
export interface EncryptionToolsType {
    id: string[];
}
export const DataManager = () => {

const profileCard: ProfileType = {
        encryptionTools: {
            id: ["0x0000000000000000000000000000000000000000000000000000000000000000"],
        },
        itemTracker: {
            name: ["Data Layer"],
        },
        itemDisplacer: {
            tags: ["Data Layer"],
        },
        itemVault: {
            description : ["0x0000000000000000000000000000000000000000000000000000000000000000"],
        },
    }

const dataLayer: DataType = {
    profile: profileCard,
    nHome: {
        profile: profileCard,
    },
    nWonderland: {
        profile: profileCard,
    },
    nBrain: {
        profile: profileCard,
    },
    nFamiliar: {
        profile: profileCard,
    },
    nMatter: {
        profile: profileCard,
    },
    nEnergy: {
        profile: profileCard,
    },
    nData: {
        profile: profileCard,
    },
    MEDcard: {
        profile: profileCard,
    },
    SatoriCard: {
        profile: profileCard,
    },
    HeroCard: {
        profile: profileCard,
    },
}
return {
    dataLayer,
    profileCard,  
};
}






